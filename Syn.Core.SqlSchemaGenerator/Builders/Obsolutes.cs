using Syn.Core.SqlSchemaGenerator.Attributes;
using Syn.Core.SqlSchemaGenerator.Models;

using System.Reflection;

namespace Syn.Core.SqlSchemaGenerator.Builders;

internal class Obsolutes
{
    ///// <summary>
    ///// Extracts unique constraints from [Unique] and [Index(IsUnique = true)] attributes.
    ///// Supports both property-level and class-level Index definitions.
    ///// </summary>
    ///// <param name="type">The entity type to inspect.</param>
    ///// <returns>List of unique constraint definitions.</returns>
    //private static List<UniqueConstraintDefinition> GetUniqueConstraints(Type type)
    //{
    //    var uniqueConstraints = new List<UniqueConstraintDefinition>();
    //    var seenKeys = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

    //    // ✅ Property-level: [Unique] or [Index(IsUnique = true)]
    //    foreach (var prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
    //    {
    //        var columnName = prop.Name;

    //        // [Unique] (custom)
    //        if (prop.GetCustomAttribute<UniqueAttribute>() != null)
    //        {
    //            var key = $"UQ_{type.Name}_{columnName}";
    //            if (seenKeys.Add(key))
    //            {
    //                uniqueConstraints.Add(new UniqueConstraintDefinition
    //                {
    //                    Name = key,
    //                    Columns = new List<string> { columnName },
    //                    IsAutoGenerated = true
    //                });
    //            }
    //        }

    //        // [Index(IsUnique = true)] from EF Core
    //        var indexAttrs = prop.GetCustomAttributes<IndexAttribute>();
    //        foreach (var indexAttr in indexAttrs)
    //        {
    //            if (indexAttr.IsUnique)
    //            {
    //                var name = indexAttr.Name ?? $"UQ_{type.Name}_{columnName}";
    //                if (seenKeys.Add(name))
    //                {
    //                    uniqueConstraints.Add(new UniqueConstraintDefinition
    //                    {
    //                        Name = name,
    //                        Columns = new List<string> { columnName },
    //                        IsAutoGenerated = true
    //                    });
    //                }
    //            }
    //        }
    //    }

    //    // ✅ Class-level: [Index(nameof(Column1), nameof(Column2), IsUnique = true)]
    //    var classLevelIndexes = type.GetCustomAttributes<IndexAttribute>();
    //    foreach (var indexAttr in classLevelIndexes)
    //    {
    //        if (indexAttr.IsUnique && indexAttr.Columns?.Length > 0)
    //        {
    //            var name = indexAttr.Name ?? $"UQ_{type.Name}_{string.Join("_", indexAttr.Columns)}";
    //            if (seenKeys.Add(name))
    //            {
    //                uniqueConstraints.Add(new UniqueConstraintDefinition
    //                {
    //                    Name = name,
    //                    Columns = indexAttr.Columns?.ToList(),
    //                    IsAutoGenerated = true
    //                });
    //            }
    //        }
    //    }

    //    return uniqueConstraints;
    //}
}
